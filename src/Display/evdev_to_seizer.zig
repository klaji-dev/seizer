pub fn evdevToSeizer(scancode: u32) seizer.input.keyboard.Scancode {
    std.debug.assert(scancode < std.math.maxInt(u16));
    const evdev_key: evdev.KEY = @enumFromInt(@as(u16, @intCast(scancode)));
    return switch (evdev_key) {
        .esc => .escape,
        .@"1" => .@"1",
        .@"2" => .@"2",
        .@"3" => .@"3",
        .@"4" => .@"4",
        .@"5" => .@"5",
        .@"6" => .@"6",
        .@"7" => .@"7",
        .@"8" => .@"8",
        .@"9" => .@"9",
        .@"0" => .@"0",

        .minus => .minus,
        .equal => .equal,
        .backspace => .backspace,
        .tab => .tab,

        .q => .q,
        .w => .w,
        .e => .e,
        .r => .r,
        .t => .t,
        .y => .y,
        .u => .u,
        .i => .i,
        .o => .o,
        .p => .p,
        .a => .a,
        .s => .s,
        .d => .d,
        .f => .f,
        .g => .g,
        .h => .h,
        .j => .j,
        .k => .k,
        .l => .l,
        .z => .z,
        .x => .x,
        .c => .c,
        .v => .v,
        .b => .b,
        .n => .n,
        .m => .m,

        .leftbrace => .bracket_left,
        .rightbrace => .bracket_right,
        .enter => .enter,
        .leftctrl => .control_left,
        .rightctrl => .control_right,
        .semicolon => .semicolon,
        .apostrophe => .quote,
        .grave => .backquote,
        .leftshift => .shift_left,
        .backslash => .backslash,
        .comma => .comma,
        .dot => .period,
        .slash => .slash,
        .rightshift => .shift_right,
        .kpasterisk => .numpad_multiply,
        .leftalt => .alt_left,
        .rightalt => .alt_right,
        .space => .space,
        .capslock => .caps_lock,
        .f1 => .f1,
        .f2 => .f2,
        .f3 => .f3,
        .f4 => .f4,
        .f5 => .f5,
        .f6 => .f6,
        .f7 => .f7,
        .f8 => .f8,
        .f9 => .f9,
        .f10 => .f10,
        .f11 => .f11,
        .f12 => .f12,
        .numlock => .num_lock,
        .scrolllock => .scroll_lock,
        .kp7 => .numpad7,
        .kp8 => .numpad8,
        .kp9 => .numpad9,
        .kpminus => .numpad_subtract,
        .kp4 => .numpad4,
        .kp5 => .numpad5,
        .kp6 => .numpad6,
        .kpplus => .numpad_add,
        .kp1 => .numpad1,
        .kp2 => .numpad2,
        .kp3 => .numpad3,
        .kp0 => .numpad0,
        .kpdot => .numpad_decimal,

        .home => .home,
        .up => .arrow_up,
        .pageup => .page_up,
        .left => .arrow_left,
        .right => .arrow_right,
        .end => .end,
        .down => .arrow_down,
        .pagedown => .page_down,
        .insert => .insert,
        .delete => .delete,
        // .mute => .mute,
        // .volumedown => .volumedown,
        // .volumeup => .volumeup,

        .kpcomma => .numpad_comma,
        .yen => .intl_yen,
        .ro => .intl_ro,
        .leftmeta => .meta_left,
        .rightmeta => .meta_right,

        else => |k| std.debug.panic("Unknown Linux kernel EvDev KEY: {}", .{k}),
    };
}

const evdev = @import("./evdev.zig");
const seizer = @import("../seizer.zig");
const std = @import("std");
